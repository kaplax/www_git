<?php
/**
 * 用户基本信息
 * @author kk
 * @since 2017-09-05
 */
class User {
	public static $userCodeTableName    =   'app_user_code';
	public static $userInfoTableName    =   'app_user_info';
	/**
	 * 调用方法： user::checkUserRegInfo($params)
	 * 用户注册信息认证
	 * @since 2017-09-04
	 * @param  传递的参数
	 * 	name(用户姓名) 必须 
	 *  code(识别码)  必须 
	 *  employee_id 员工编号    选填内容
	 *  phone       员工电话，  选填内容
	 * @return  返回的参数
	 *  ret  状态值：0 正常，其他错误
	 *  msg  错误提示
	 *  data 返回绑定的其他用户信息，
	 *  数组形式返回 array( 'username','phone','department_id','sex','employee_id' )
	 *  具体参照 app_user_code 表
	 */
	public static function checkUserRegInfo( $params )
	{
		$ret_array	=	array( 'ret'=>-1 ,'msg'=>null ,'data'=>null ,'occur'=>'M_User_checkUserRegInfo' );
		do{
			$name	=	isset( $params['name'] ) ? $params['name'] : '';
			$code	=	isset( $params['code'] ) ? $params['code'] : '';
			$employee_id	=	isset( $params['employee_id'] ) ? $params['employee_id'] : '';
			$phone			=	isset( $params['phone'] ) ? $params['phone'] : '';
			if( empty( $name ) || empty( $code ) ){
				$ret_array['ret']	=	1;
				$ret_array['msg']	=	'注册失败，没有传递正确的用户信息！';
				break;
			}
			$where			=	' WHERE username=:username and PIN=:PIN ';
			$connection		=	CfgAR::setDbLink( 'db' );
			if( '-3306'==$connection ){
				$ret_array['ret']	=	3;
				$ret_array['msg']	=	'服务器异常，请稍后再试！';
				break;
			}
			$sql		=	"SELECT * FROM ". self::$userCodeTableName . $where ;
			$command	=	$connection->createCommand($sql);
			$command->bindParam(":username", $name , PDO::PARAM_STR );
			$command->bindParam(":PIN", $code , PDO::PARAM_STR );
			$resDate	=	$command->queryRow();
			if( empty( $resDate ) ){
				$ret_array['ret']	=	1;
				$ret_array['msg']	=	'注册失败，没有对应的用户信息！请联络管理员分配账户！';
				break;
			}
			if( 1==$resDate['status'] ){
				$ret_array['ret']	=	2;
				$ret_array['msg']	=	'注册失败，'.REG_CODE_NAME .'已被使用！';
				break;
			}
			if( 2==$resDate['status'] ){
				$ret_array['ret']	=	3;
				$ret_array['msg']	=	'注册失败，'.REG_CODE_NAME .'已过期！';
				break;
			}
			if( 3==$resDate['status'] ){
				$ret_array['ret']	=	4;
				$ret_array['msg']	=	'注册失败，'.REG_CODE_NAME .'已被删除！';
				break;
			}
			if( 0!=$resDate['status'] ){
				$ret_array['ret']	=	5;
				$ret_array['msg']	=	'注册失败，'.REG_CODE_NAME .'不正确！请联系管理员重新分配！';
				break;
			}
			$ret_array['ret']		=	0;
			$ret_array['data']		=	$resDate;
		}while(0);
		if( 0!=$ret_array['ret'] ){
			Common::toTxt( array('file'=>'Log_M_User_checkUserRegInfo.txt', 'txt'=>'input:'. var_export( $params ,true ) .'| outPut:'.var_export( $ret_array, true) ) );
		}
		return $ret_array;
	}
	
	/**
	 * 调用方法 User::login($params)
	 * 用户登录接口
	 * @since 2017-09-04
	 * @param  传递的参数
	 * 	name(用户姓名、电话、邮箱) 必须 
	 *  password   必须 
	 * @return  返回的参数
	 *  ret  状态值：0 正常，其他错误
	 *  msg  错误提示
	 *  data 返回绑定的其他用户信息，
	 *  数组形式返回 array()
	 *  id,username,department_id,employee_id,phone,e_mail,occupation_id,   status,      grade
	 *  用户id,用户名，     部门项目id,     员工编号,      电话，     邮箱，          岗位id，                     状态（0，正常，1删除），权限等级（0，普通，》0 管理员）
	 *  具体参照 app_user_Info 表
	 */
	public static function userLogin($params)
	{
		$ret_array	=	array( 'ret'=>-1 ,'msg'=>null ,'data'=>null ,'occur'=>'M_User_userLogin' );
		do{
			$name		=	isset( $params['name'] ) ? $params['name'] : '';
			$password	=	isset( $params['password'] ) ? md5($params['password']) : '';
			if( empty( $name ) || empty( $password ) ){
				$ret_array['ret']	=	1;
				$ret_array['msg']	=	'登录失败，请输入正确的用户名和密码！';
				break;
			}
			$connection		=	CfgAR::setDbLink( 'db' );
			if( '-3306'==$connection ){
				$ret_array['ret']	=	3;
				$ret_array['msg']	=	'服务器异常，请稍后再试！';
				break;
			}
			//判断是否是邮箱，判断条件是否还@
			if( strpos( $name , '@' ) ){
				$where			=	' WHERE e_mail=:username and password=:password ';
			}
			//判断是否是手机号码
			if( Common::matchPhone( $name ) ){
				$where			=	' WHERE phone=:username and password=:password ';
			}
			//用户姓名判断
			if( !eregi("[^\x80-\xff]",$name) ){
				$where			=	' WHERE username=:username and password=:password ';
			}
			$sql		=	"SELECT id,username,department_id,employee_id,phone,e_mail,occupation_id,status,grade FROM ". self::$userInfoTableName . $where ;
			$command	=	$connection->createCommand($sql);
			$command->bindParam(":username", $name , PDO::PARAM_STR );
			$command->bindParam(":password", $password , PDO::PARAM_STR );
			$resDate	=	$command->queryRow();
			if( !empty( $resDate ) ){
				if( 0!=$resDate['status'] ){
					$ret_array['ret']	=	1;
					$ret_array['msg']	=	'登录失败，用户已被删除！';
					break;
				}
				$ret_array['ret']	=	0;
				$ret_array['data']	=	$resDate;
				break;
			}
			$ret_array['ret']	=	3;
			$ret_array['msg']	=	'登录失败，用户名或者密码错误！';
			break;
		}while(0);
		if( 0!=$ret_array['ret'] ){
			Common::toTxt( array('file'=>'Log_M_User_userLogin.txt', 'txt'=>'input:'. var_export( $params ,true ) .'| outPut:'.var_export( $ret_array, true) ) );
		}
		return $ret_array;
	}
	/**
	 * 获取对应的用户部门
	 * 调用方法 User::getUserDepartment($params)
	 * @since 2017-09-04
	 * @param  传递的参数
	 * 	id(用户id) 必须 
	 *  grade(用户权限)   必须 
	 * @return  返回的参数
	 *  ret  状态值：0 正常，其他错误
	 *  msg  错误提示
	 *  data 返回绑定的其他用户信息，
	 *  数组形式返回 array(
	 *  	'list'=>''
	 *  )
	 *  id,username,department_id,employee_id,phone,e_mail,occupation_id,   status,      grade
	 *  用户id,用户名，     部门项目id,     员工编号,      电话，     邮箱，          岗位id，                     状态（0，正常，1删除），权限等级（0，普通，》0 管理员）
	 *  具体参照 app_user_Info 表
	 * 
	 */
	public static function getUserDepartment( $params )
	{
		$ret_array	=	array( 'ret'=>-1 ,'msg'=>null ,'data'=>null ,'occur'=>'M_User_getUserDepartment' );
		do{
			
		}while(0);
		if( 0!=$ret_array['ret'] ){
			Common::toTxt( array('file'=>'Log_M_User_getUserDepartment.txt', 'txt'=>'input:'. var_export( $params ,true ) .'| outPut:'.var_export( $ret_array, true) ) );
		}
		return $ret_array;
	}
}
